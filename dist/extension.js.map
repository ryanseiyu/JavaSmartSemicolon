{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCpBA,eAOAQ,QAAQC,IACP,uEAoBD,oBAAyBC,GACxB,IAAIC,EAAaC,EAAOC,SAASC,gBAChC,oCACA,KACC,MAAMC,EAASH,EAAOI,OAAOC,iBAE7B,GAAIF,EAAQ,CACX,MAAMG,EAAWH,EAAOG,SACxB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAASE,UAAWD,IAAK,CAC/BD,EAASG,OAAOF,GAA7B,MACMG,EAAO,IAAIV,EAAOW,cAClBC,EACL,8DACKC,EAAmB,kBACzB,IAAK,IAAIN,EAAI,EAAGA,EAAID,EAASE,UAAWD,IAAK,CAC5C,MAAMO,EAAOR,EAASG,OAAOF,IAEzBK,EAAMG,KAAKD,EAAKE,OAETH,EAAiBE,KAAKD,EAAKE,QADrCN,EAAKO,OAAOX,EAASY,IAAKJ,EAAKK,MAAMC,IAAK,I,CAK5CpB,EAAOqB,UAAUC,UAAUZ,E,MAM/BZ,EAAQyB,cAAcC,KAAKzB,EAC5B,EAGA,wBAA8B,C","sources":["webpack://JavaSmartSemicolon/external commonjs \"vscode\"","webpack://JavaSmartSemicolon/webpack/bootstrap","webpack://JavaSmartSemicolon/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\n// export function activate(context: vscode.ExtensionContext) {\n// \t// Use the console to output diagnostic information (console.log) and errors (console.error)\n// \t// This line of code will only be executed once when your extension is activated\nconsole.log(\n\t'Congratulations, your extension \"JavaSmartSemicolon\" is now active!'\n);\n\n// \t// The command has been defined in the package.json file\n// \t// Now provide the implementation of the command with registerCommand\n// \t// The commandId parameter must match the command field in package.json\n// let disposable = vscode.commands.registerCommand(\n// \t\"JavaSmartSemicolon.helloWorld\",\n// \t() => {\n// \t\t// The code you place here will be executed every time your command is executed\n// \t\t// Display a message box to the user\n// \t\tvscode.window.showInformationMessage(\n// \t\t\t\"Hello World from Java Smart Semicolon!\"\n// \t\t);\n// \t}\n// );\n\n// \tcontext.subscriptions.push(disposable);\n// }\n\nexport function activate(context: vscode.ExtensionContext) {\n\tlet disposable = vscode.commands.registerCommand(\n\t\t\"JavaSmartSemicolon.addSemicolons\",\n\t\t() => {\n\t\t\tconst editor = vscode.window.activeTextEditor;\n\n\t\t\tif (editor) {\n\t\t\t\tconst document = editor.document;\n\t\t\t\tfor (let i = 0; i < document.lineCount; i++) {\n\t\t\t\t\tconst line = document.lineAt(i);\n\t\t\t\t\tconst edit = new vscode.WorkspaceEdit();\n\t\t\t\t\tconst regex =\n\t\t\t\t\t\t/.*\\b(int|float|double|boolean|char|byte|short|long)\\b[^;]*$/;\n\t\t\t\t\tconst regexParenthesis = /.*(?<!\\.)\\)\\s*$/;\n\t\t\t\t\tfor (let i = 0; i < document.lineCount; i++) {\n\t\t\t\t\t\tconst line = document.lineAt(i);\n\t\t\t\t\t\t// Do something with the line, such as print it to the console\n\t\t\t\t\t\tif (regex.test(line.text)) {\n\t\t\t\t\t\t\tedit.insert(document.uri, line.range.end, \";\");\n\t\t\t\t\t\t} else if (regexParenthesis.test(line.text)) {\n\t\t\t\t\t\t\tedit.insert(document.uri, line.range.end, \";\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvscode.workspace.applyEdit(edit);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n\n\tcontext.subscriptions.push(disposable);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","console","log","context","disposable","vscode","commands","registerCommand","editor","window","activeTextEditor","document","i","lineCount","lineAt","edit","WorkspaceEdit","regex","regexParenthesis","line","test","text","insert","uri","range","end","workspace","applyEdit","subscriptions","push"],"sourceRoot":""}